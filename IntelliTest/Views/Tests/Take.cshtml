@model TestSubmitViewModel
@{
    ViewBag.Title = "Taking Test";

    int mins = Model.Time;
    int sec = 0;
    if (TempData.ContainsKey("TestStart"))
    {
        var span = DateTime.Now - (DateTime)TempData.Peek("TestStart");
        mins -= (int)Math.Ceiling(Math.Ceiling(span.TotalSeconds)/60);
        if (span.Seconds!=0)
        {
            sec += 60 - span.Seconds;
        }
    }
    else
    {
        TempData["TestStart"] = DateTime.Now;
    }
}
<div class="editMain">
    <div id="addAddMoreDiv" style="width: 60%; margin-top: 50px; margin-bottom: 50px">
        <div class="timer">
            <h1 id="timer" style="margin: 0">@mins.ToString("D2"):@sec.ToString("D2")</h1>    
        </div>
        <form method="post" name="test">
            @for (int i = 0; i < Model.ClosedQuestions.Count + Model.OpenQuestions.Count; i++)
            {
                if (Model.ClosedQuestions.Any(q => q.Order == i))
                {
                    var question = Model.ClosedQuestions.FirstOrDefault(q => q.Order == i);
                    int indx = Model.ClosedQuestions.IndexOf(question);
                            <partial name="Questions/ClosedQuestionTakePartialView" for="ClosedQuestions[indx]"/>
                }
                else
                {
                    var q = Model.OpenQuestions.FindIndex(j => j.Order == i);
                            <partial name="Questions/OpenQuestionTakePartialView" for="OpenQuestions[q]"/>
                }
            }
            <hr/>
            <button class="btn blue btn-primary" type="submit">Готово</button>
        </form>
    </div>
</div>

@section Scripts
{
    <script>
            function onFocus(e) {
                e.parentNode.parentNode.parentNode.style.backgroundPosition = "0";
            }
            function onFocusOut(e){
                e.parentNode.parentNode.parentNode.style.backgroundPosition = "-0.4em 0em";
            }
            var timer = document.getElementById("timer");
            var interval = 1000; 
            var expected = Date.now() + interval;
            var min = @mins;
            var sec = @sec;
            setTimeout(step, interval);
            function step() {
                var dt = Date.now() - expected;
                sec--;
                if(sec < 0){
                    sec+=60;
                    min--;
                }
                if(min===0 && sec===0){
                    document.forms["test"].submit(); 
                }
                timer.innerHTML = ("0" + min).slice(-2) + ":" + ("0" + sec).slice(-2);
                expected += interval;
                setTimeout(step, Math.max(0, interval - dt));
            }
            document.addEventListener("visibilitychange", () => {
                if(document.hidden){
                    document.forms["test"].submit();
                }
            });
                localStorage.setItem("takingTest", window.location.href);
        </script>
    <script src="~/js/testTake.js"></script>
    }
