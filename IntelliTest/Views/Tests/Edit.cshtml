@model TestEditViewModel
@{
    ViewBag.Title = "Edit Test";
    if (Model.ClosedQuestions == null)
    {
        Model.ClosedQuestions = new List<ClosedQuestionViewModel>();
    }
    if (Model.OpenQuestions == null)
    {
        Model.OpenQuestions = new List<OpenQuestionViewModel>();
    }
}
<div class="editMain">
    <div id="addAddMoreDiv" style="width: 60%">
        <form>
            <div class="customRow" style="margin-top: 50px">
                <div class="questTextBox d-flex questBox align-items-start widthMax" style="flex-direction: column;">
                    <div class="d-flex">
                        <label asp-for="Title" style="margin-right: 10px"></label>
                        <div style="flex-grow: 1">
                            <input class="fs-5" onfocus="onFocus(this)" onblur=onFocusOut(this) id="title" type="text" value="@Model.Title"/>
                        </div>
                    </div>
                    <div class="widthMax">
                        <label asp-for="Description" style="display: flex"></label>
                        <textarea type="text" value="@Model.Description" id="desc"></textarea>
                    </div>
                    <div class="d-flex">
                        <label asp-for="Grade"></label>
                        <div class="smallInput">
                            <input class="fs-4" onfocus="onFocus(this)" onblur=onFocusOut(this) id="grade" type="text" value="@Model.Grade" style="text-align: center"/>
                        </div>
                        <label asp-for="Time"></label>
                        <div class="smallInput">
                            <input class="fs-4" onfocus="onFocus(this)" onblur=onFocusOut(this) id="time" type="text" value="@Model.Time" style="text-align: center"/>
                        </div>
                    </div>
                </div>
            </div>
            <div class="customRow">
                <div class="questTextBox d-flex questBox align-items-start widthMax" style="flex-direction: column;">
                    <div class="widthMax">
                        <label style="display: flex">Текст</label>
                        <input name="text" id="prompt"class="input-field widthMax" name="url" class="widthMax" style="color: black">
                    </div>
                    <br/>
                    <button type="button" class="btn btn-secondary" id="gen">Генерирай</button>
                    <br/>
                    <div class="widthMax">
                        <label style="display: flex">От линк(URL) или заглавие</label>
                        <input id="lessonName" class="input-field widthMax" name="url" class="widthMax" style="color: black">
                    </div>
                    <span class="text-danger" id="lessonError"></span>
                    <br/>
                    <button type="button" class="btn btn-secondary" id="genLesson" class="btn btn-secondary">Генерирай</button>
                </div>
            </div>
            <div id="questions">
                @{
                    int closedQuestionCount = Model.OpenQuestions.Count;
                    Model.ClosedQuestions.AddRange(Enumerable.Repeat(new ClosedQuestionViewModel(){Order=-1}, Model.OpenQuestions.Count));
                    Model.OpenQuestions.AddRange(Enumerable.Repeat(new OpenQuestionViewModel(){Order=-1}, closedQuestionCount));
                    var closedQuestionsDummy = new List<ClosedQuestionViewModel>();
                    var openQuestionsDummy = new List<OpenQuestionViewModel>();
                    foreach (var question in Model.ClosedQuestions)
                    {
                        closedQuestionsDummy.Add(question);
                    }
                    foreach (var question in Model.OpenQuestions)
                    {
                        openQuestionsDummy.Add(question);
                    }
                    for (int i = 0; i < closedQuestionsDummy.Count; i++)
                    {
                        if (Model.ClosedQuestions.Any(q => q.Order == i))
                        {
                            var question = closedQuestionsDummy.FirstOrDefault(q => q.Order == i);
                            Model.ClosedQuestions[i] = question;
                                <partial name="Questions/ClosedQuestionPartialView" for="ClosedQuestions[i]"/>
                        }
                        else
                        {
                            var q = openQuestionsDummy.FirstOrDefault(j => j.Order == i);
                            Model.OpenQuestions[i] = q;
                                <partial name="Questions/OpenQuestionPartialView" for="OpenQuestions[i]"/>
                        }
                    }
                }
            </div>
            <button type="button" id="openQuestionAdd" class="btn btn-secondary">Добави отворен въпрос</button>
            <button type="button" id="closedQuestionAdd" class="btn btn-secondary">Добави затворен въпрос</button>
            <hr/>
            <button class="btn blue btn-primary" type="submit">Готово</button>
        </form>
    </div>
</div>

@section Scripts
{
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        btns = document.getElementsByTagName("button");
        input = Array.prototype.slice.call(btns);
        input.forEach(b=>b.addEventListener("click", save));
        function onFocus(e) {
            e.parentNode.parentNode.parentNode.style.backgroundPosition = "0";
        }
        function onFocusOut(e){
            e.parentNode.parentNode.parentNode.style.backgroundPosition = "-0.4em 0em";
        }
    </script>
    <script>
        var count = @Model.ClosedQuestions.Count();
        var id = "@Model.Id";
    </script>
    <script src="~/js/testEdit.js"></script>
}